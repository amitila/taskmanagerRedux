{"version":3,"sources":["constants/ActionTypes.js","actions/index.js","components/TaskForm.js","components/TaskControlSearch.js","components/TaskControlSort.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","App.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/taskEditing.js","reducers/filter.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["LIST_ALL","SAVE_TASK","CLOSE_FORM","TOGGLE_FORM","OPEN_FORM","UPDATE_STATUS","DELETE_ITEM","UPDATE_ITEM","FILTER_TASK","SEARCH_TASK","SORT_TASK","closeForm","type","types","openForm","updateItem","task","TaskForm","props","onCloseForm","event","onChange","target","name","value","setState","onSave","preventDefault","onSaveTask","state","onClear","status","id","this","taskEditing","nextProps","isDisplayForm","className","onClick","onSubmit","Component","connect","dispatch","actions","TaskControlSearch","onSearch","onSearchTask","keyword","placeholder","TaskControlSort","sortBy","sortValue","onSort","by","sort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","TaskControl","TaskItem","onUpdateStatus","onDelete","onDeleteItem","onUpdate","onShowForm","onUpdateItem","index","TaskList","filter","filterName","filterStatus","onFilterTask","tasks","a","b","toLowerCase","indexOf","elmTasks","map","search","App","onToggleForm","onClearTask","findIndex","result","forEach","s4","Math","floor","random","toString","substring","randomID","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","push","setItem","stringify","splice","parseInt","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab61817d.chunk.js","sourcesContent":["export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const UPDATE_ITEM = 'UPDATE_ITEM';\r\nexport const FILTER_TASK = 'FILTER_TASK';\r\nexport const SEARCH_TASK = 'SEARCH_TASK';\r\nexport const SORT_TASK = 'SORT_TASK';","import * as types from './../constants/ActionTypes';\r\n\r\nexport const listAll = () => {\r\n\treturn {\r\n\t\ttype : types.LIST_ALL\r\n\t}\r\n}\r\n\r\nexport const saveTask = (task) => {\r\n\treturn {\r\n\t\ttype: types.SAVE_TASK,\r\n\t\ttask // task: task\r\n\t}\r\n}\r\n\r\nexport const closeForm = () => {\r\n\treturn {\r\n\t\ttype: types.CLOSE_FORM\r\n\t}\r\n}\r\n\r\nexport const toggleForm = () => {\r\n\treturn {\r\n\t\ttype: types.TOGGLE_FORM\r\n\t}\r\n}\r\n\r\nexport const openForm = () => {\r\n\treturn {\r\n\t\ttype: types.OPEN_FORM\r\n\t}\r\n}\r\n\r\nexport const updateStatus = (id) => {\r\n\treturn {\r\n\t\ttype: types.UPDATE_STATUS,\r\n\t\tid // id : id\r\n\t}\r\n}\r\n\r\nexport const deleteItem = (id) => {\r\n\treturn {\r\n\t\ttype: types.DELETE_ITEM,\r\n\t\tid // id : id\r\n\t}\r\n}\r\n\r\nexport const updateItem = (task) => {\r\n\treturn {\r\n\t\ttype: types.UPDATE_ITEM,\r\n\t\ttask // task : task\r\n\t}\r\n}\r\n\r\nexport const filterTask = (filter) => {\r\n\treturn {\r\n\t\ttype: types.FILTER_TASK,\r\n\t\tfilter // filter : filter -> filterName, filterStatus\r\n\t}\r\n}\r\n\r\nexport const searchTask = (keyword) => {\r\n\treturn {\r\n\t\ttype: types.SEARCH_TASK,\r\n\t\tkeyword\r\n\t}\r\n}\r\n\r\nexport const sortTask = (sort) => {\r\n\treturn {\r\n\t\ttype: types.SORT_TASK,\r\n\t\tsort // sort : sort -> sortBy, sortValue\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskForm extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tid : '',\r\n\t\t\tname : '',\r\n\t\t\tstatus : false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentWillMount() {\r\n\t\tif(this.props.taskEditing && this.props.taskEditing.id !== null){\r\n\t\t\tthis.setState({\r\n\t\t\t\tid : this.props.taskEditing.id,\r\n\t\t\t\tname : this.props.taskEditing.name,\r\n\t\t\t\tstatus : this.props.taskEditing.status\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tthis.onClear();\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps){\r\n\t\tif(nextProps && nextProps.taskEditing){\r\n\t\t\tthis.setState({\r\n\t\t\t\tid : nextProps.taskEditing.id,\r\n\t\t\t\tname : nextProps.taskEditing.name,\r\n\t\t\t\tstatus : nextProps.taskEditing.status\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tthis.onClear();\r\n\t\t}\r\n\t}\r\n\r\n\tonCloseForm = (event) => {\r\n\t\tthis.props.onCloseForm();\r\n\t}\r\n\r\n\tonChange = (event) => {\r\n\t\tvar target = event.target;\r\n\t\tvar name = target.name;\r\n\t\tvar value = target.value;\r\n\t\tif(name === 'status') {\r\n\t\t\tvalue = target.value === 'true' ? true : false;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\t[name] : value\r\n\t\t});\r\n\t}\r\n\r\n\tonSave  = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tthis.props.onSaveTask(this.state);\r\n\t\t//Clear and Close form\r\n\t\tthis.onClear();\r\n\t\tthis.onCloseForm();\r\n\t}\r\n\r\n\tonClear = () => {\r\n\t\tthis.setState({\r\n\t\t\tname : '',\r\n\t\t\tstatus : false\r\n\t\t});\r\n\t}\r\n\r\n    render() {\r\n    \tif(!this.props.isDisplayForm) return '';\r\n        return (\r\n\t\t\t<div className=\"panel panel-warning\">\r\n\t\t\t\t<div className=\"panel-heading\">\r\n\t\t\t\t\t<h3 className=\"panel-title\">\r\n\t\t\t\t\t\t{this.state.id !== '' ? 'Update task' : 'Add task'}\r\n\t\t\t\t\t\t<span \r\n\t\t\t\t\t\t\tclassName=\"fa fa-times-circle text-right\" \r\n\t\t\t\t\t\t\tonClick={this.onCloseForm}\r\n\t\t\t\t\t\t></span>\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"panel-body\">\r\n\t\t\t\t   <form onSubmit={this.onSave} >\r\n\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t<label>Name:</label>\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\t\tclassName=\"form-control\" \r\n\t\t\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.name}\r\n\t\t\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<label>Status:</label>\r\n\t\t\t\t\t\t<select \r\n\t\t\t\t\t\t\tclassName=\"form-control\" \r\n\t\t\t\t\t\t\tname=\"status\"\r\n\t\t\t\t\t\t\tvalue={this.state.status}\r\n\t\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<option value={true} >Active</option>\r\n\t\t\t\t\t\t\t<option value={false} >Hide</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-warning\">\r\n\t\t\t\t\t\t\t<span className=\"fa fa-plus mr-5\"></span>Submit\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\t\t\t\tclassName=\"btn btn-danger\"\r\n\t\t\t\t\t\t\t\tonClick={this.onClear}\r\n\t\t\t\t\t\t\t><span className=\"fa fa-close mr-5\"></span>Clear\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t   </form>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tisDisplayForm: state.isDisplayForm,\r\n\t\ttaskEditing : state.taskEditing\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n\treturn {\r\n\t\tonSaveTask : (task) => {\r\n\t\t\tdispatch(actions.saveTask(task));\r\n\t\t},\r\n\t\tonCloseForm: () => {\r\n            dispatch(actions.closeForm());\r\n        }\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (TaskForm);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskControlSearch extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tkeyword : ''\r\n\t\t}\r\n\t}\r\n\r\n\tonChange = (event)=>{\r\n\t\tvar target = event.target;\r\n\t\tvar name = target.name;\r\n\t\tvar value = target.value;\r\n\t\tthis.setState({\r\n\t\t\t[name] : value\r\n\t\t});\r\n\t}\r\n\r\n\tonSearch = (event)=>{\r\n\t\tthis.props.onSearchTask(this.state.keyword);\r\n\t}\r\n\r\n    render() {\r\n    \tvar {keyword} = this.state;\t\r\n        return (\r\n\t\t\t<div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n\t\t\t\t<div className=\"input-group\">\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tname=\"keyword\" \r\n\t\t\t\t\t\tclassName=\"form-control\" \r\n\t\t\t\t\t\tplaceholder='Enter key word...' \r\n\t\t\t\t\t\tvalue={keyword}\r\n\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<span className=\"input-group-btn\">\r\n\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\r\n\t\t\t\t\t\t\tonClick={this.onSearch}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t      <span className=\"fa fa-search mr-5\"></span>Search\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>  \r\n\t\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSearchTask: (keyword) => {\r\n            dispatch(actions.searchTask(keyword));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps) (TaskControlSearch);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskControlSort extends Component {\r\n\r\n\tonClick = (sortBy, sortValue) => {\r\n\t\tthis.props.onSort({\r\n\t\t\tby : sortBy,\r\n\t\t\tvalue : sortValue\r\n\t\t});\r\n\t}\r\n\r\n    render() {\r\n    \tvar {sort} = this.props;\r\n        return (\r\n\t\t\t<div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n\t\t\t\t<div className=\"dropdown\">\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName=\"btn btn-primary dropdown-toggle\" \r\n\t\t\t\t\t\ttype=\"button\" \r\n\t\t\t\t\t\tid=\"dropdownMenu1\" \r\n\t\t\t\t\t\tdata-toggle=\"dropdown\" \r\n\t\t\t\t\t\taria-haspopup=\"true\" \r\n\t\t\t\t\t\taria-expanded=\"true\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSort <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<ul className=\"dropup-menu\" aria-labelledby=\"dropupMenu1\" >\r\n\t\t\t\t\t\t<li onClick = { () => this.onClick('name', 1)} >\r\n\t\t\t\t\t\t    <a \r\n\t\t\t\t\t\t    \trole=\"button\" \r\n\t\t\t\t\t\t    \tclassName= {(sort.by === 'name' && sort.value === 1) ? 'sort_selected' : ''}\r\n\t\t\t\t\t    \t>\r\n\t\t\t\t\t\t        <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n\t\t\t\t\t\t        \tName A-Z\r\n\t\t\t\t\t\t        </span>\r\n\t\t\t\t\t\t    </a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li onClick = { () => this.onClick('name', -1)} >\r\n\t\t\t\t\t\t    <a \r\n\t\t\t\t\t\t    \trole=\"button\"\r\n\t\t\t\t\t\t    \tclassName = {(sort.by === 'name' && sort.value === -1) ? 'sort_selected' : ''}\r\n\t\t\t\t\t\t    >\r\n\t\t\t\t\t\t        <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n\t\t\t\t\t\t        \tName Z-A\r\n\t\t\t\t\t\t        </span>\r\n\t\t\t\t\t\t    </a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li role=\"seperator\" className=\"divider\"></li>\r\n\t\t\t\t\t\t<li onClick = { () => this.onClick('status', 1)} >\r\n\t\t\t\t\t\t\t<a \r\n\t\t\t\t\t\t\t\trole=\"button\"\r\n\t\t\t\t\t\t\t\tclassName = {(sort.by === 'status' && sort.value === 1) ? 'sort_selected' : ''}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tActive status\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li onClick = { () => this.onClick('status', -1)} >\r\n\t\t\t\t\t\t\t<a \r\n\t\t\t\t\t\t\t\trole=\"button\"\r\n\t\t\t\t\t\t\t\tclassName = {(sort.by === 'status' && sort.value === -1) ? 'sort_selected' : ''}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tHide status\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div> \r\n\t\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        sort : state.sort\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n       \tonSort: (sort) => {\r\n            dispatch(actions.sortTask(sort));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (TaskControlSort);","import React, { Component } from 'react';\r\nimport TaskControlSearch from './TaskControlSearch';\r\nimport TaskControlSort from './TaskControlSort';\r\n\r\nclass TaskControl extends Component {\r\n\r\n    render() {\r\n        return (\r\n\t\t\t<div className=\"row mt-15\">\r\n\t\t\t{/* Search*/}\r\n\t\t\t\t<TaskControlSearch />\r\n\t\t\t{/*Sort*/}\r\n\t\t\t\t<TaskControlSort />\r\n\t\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskControl;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskItem extends Component {\r\n\r\n    onUpdateStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id)\r\n    }\r\n\r\n    onDelete = () => {\r\n        this.props.onDeleteItem(this.props.task.id);\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    onUpdate = () => {\r\n        this.props.onShowForm();\r\n        this.props.onUpdateItem(this.props.task);\r\n    }\r\n\r\n    render() {\r\n        var {task, index} = this.props;\r\n        //console.log(task);\r\n        return (\r\n            <tr>\r\n                <td>{index}</td>\r\n                <td>{task.name}</td>\r\n                <td className=\"text-center\">\r\n                    <span \r\n                        className={task.status === true ? 'label label-danger':'label label-success'}\r\n                        onClick={this.onUpdateStatus}\r\n                    >\r\n                        {task.status === true ? 'Active':'Hide'}\r\n                    </span>\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-warning\"\r\n                        onClick={this.onUpdate}\r\n                    >\r\n                        <span className=\"fa fa-pencil mr-5\"></span>Edit\r\n                    </button>\r\n                    &nbsp;\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-danger\"\r\n                        onClick={this.onDelete}\r\n                    >\r\n                        <span className=\"fa fa-trash mr-5\"></span>Delete\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        \r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onUpdateStatus: (id) => {\r\n            dispatch(actions.updateStatus(id))\r\n        },\r\n        onDeleteItem: (id) => {\r\n            dispatch(actions.deleteItem(id));\r\n        },\r\n        onCloseForm: () => {\r\n            dispatch(actions.closeForm())\r\n        },\r\n        onUpdateItem: (task) => {\r\n            dispatch(actions.updateItem(task))\r\n        },\r\n        onShowForm: () => {\r\n            dispatch(actions.openForm())\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (TaskItem);","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            filterName : '',\r\n            filterStatus : -1 //all:-1, active:1, hide:0\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        var filter = {\r\n            name : name === 'filterName' ? value : this.state.filterName,\r\n            status : name === 'filterStatus' ? value : this.state.filterStatus\r\n        };\r\n        this.props.onFilterTask(filter);\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var {tasks, filter, keyword, sort} = this.props;\r\n        // sort\r\n        if(sort.by === 'name'){\r\n            tasks.sort((a,b) => {\r\n                if(a.name > b.name) return sort.value;\r\n                else if (a.name < b.name) return -sort.value;\r\n                else return 0;\r\n            });\r\n        }else{\r\n            tasks.sort((a,b) => {\r\n                if(a.status > b.status) return -sort.value;\r\n                else if (a.status < b.status) return sort.value;\r\n                else return 0;\r\n            });\r\n        }\r\n        // search\r\n        if(keyword){\r\n            tasks = tasks.filter((task)=>{\r\n                return task.name.toLowerCase().indexOf(keyword) !== -1;\r\n            });\r\n        }\r\n        // Filter table\r\n        if(filter.name){\r\n            tasks = tasks.filter((task)=>{\r\n                return task.name.toLowerCase().indexOf(filter.name) !== -1;\r\n            });\r\n        }\r\n        tasks = tasks.filter((task)=>{\r\n            if(filter.status === -1){\r\n                return task;\r\n            }else{\r\n                return task.status === (filter.status === 1 ? true : false);\r\n            }\r\n        });\r\n\r\n        var elmTasks = tasks.map((task, index) => {\r\n            return <TaskItem \r\n                        key={task.id} \r\n                        index={index} \r\n                        task={task} \r\n                    />\r\n        });\r\n        return (\r\n            <table className=\"table table-borderd table-hover mt-15\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\" >No.</th>\r\n                        <th className=\"text-center\">Name</th>\r\n                        <th className=\"text-center\">Status</th>\r\n                        <th className=\"text-center\">Action</th>\r\n                    </tr>\r\n                </thead>\r\n             <tbody>\r\n                <tr>\r\n                    <td></td>\r\n                    <td>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            name=\"filterName\"\r\n                            value={filter.name}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <select \r\n                            className=\"form-control\"\r\n                            name=\"filterStatus\"\r\n                            value={filter.status}\r\n                            onChange={this.onChange}\r\n                        >\r\n                            <option value=\"-1\">All</option>\r\n                            <option value=\"0\">Hide</option>\r\n                            <option value=\"1\">Active</option>\r\n                        </select>\r\n                    </td>\r\n                    <td></td>\r\n                </tr>\r\n                {elmTasks}\r\n             </tbody>\r\n            </table>  \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks : state.tasks,\r\n        filter : state.filter,\r\n        keyword : state.search,\r\n        sort : state.sort\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onFilterTask: (filter) => {\r\n            dispatch(actions.filterTask(filter));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (TaskList);","import React, { Component } from 'react';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n   \n    onToggleForm = (event) => {//Add task\n        var { taskEditing } = this.props;\n        if(taskEditing && taskEditing.id !== ''){\n            this.props.onShowForm();\n        }else{\n            this.props.onToggleForm();\n        }\n        this.props.onClearTask({\n            id : '',\n            name : '',\n            status : false\n        });\n    }\n\n    onShowForm = (event) => {\n        this.props.onShowForm();\n    }\n\n    render() {\n        var {isDisplayForm} = this.props;\n        return (\n            <div className=\"container-fluid m-50\">\n                <div className=\"text-center\">\n                   <h1>TASK MANAGER</h1>\n                   <br/>\n                </div>\n                <div className=\"row\">\n                    <div className= {isDisplayForm ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : ''} >\n                        {/*Form*/}\n                        <TaskForm />\n                    </div>\n                    <div className= {isDisplayForm ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"} >\n                        <button \n                            type=\"button\" \n                            className=\"btn btn-primary\"\n                            onClick={this.onToggleForm}\n                        >\n                            <span className=\"fa fa-plus mr-5\"></span>\n                            Add task\n                        </button>&nbsp;\n                        {/*Search-Sort*/}\n                        <TaskControl />\n                        {/* List*/}\n                        <TaskList />\n                   </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm,\n        taskEditing: state.taskEditing\n    }\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onToggleForm: () => {\n            dispatch(actions.toggleForm());\n        },\n        onShowForm: () => {\n            dispatch(actions.openForm());\n        },\n        onClearTask : (task) => {\n            dispatch(actions.updateItem(task));\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);","import * as types from './../constants/ActionTypes';\r\n\r\nvar findIndex = (tasks, id) => {\r\n    var result = -1;\r\n    tasks.forEach((task, index) => {\r\n        if(task.id === id) {\r\n            result = index;\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nvar s4 = () => {\r\n    return Math.floor((1+Math.random()) * 0x10000).toString(16).substring(1);\r\n}\r\n\r\nvar randomID = () => {\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' +s4() + s4() + s4();\r\n}\r\n\r\nvar data = JSON.parse(localStorage.getItem('tasks'));\r\n\r\nvar initialState = data ? data : [];\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n\tvar id = '';\r\n\tvar index = -1;\r\n\tswitch(action.type){\r\n\t\tcase types.LIST_ALL:\r\n\t\t\treturn state;\r\n\t\tcase types.SAVE_TASK:\r\n\t\t\tvar task = {\r\n\t\t\t\t\tid : action.task.id,\r\n\t\t\t\t\tname : action.task.name,\r\n\t\t\t\t\tstatus : (action.task.status === true || action.task.status === 'true') ? true : false\r\n\t\t\t\t}\r\n\r\n\t\t\tif(!task.id){\r\n\t\t\t\ttask.id = randomID();\r\n\t\t\t\tstate.push(task);\r\n\t\t\t\t\r\n\t\t\t}else{\r\n\t\t\t\tindex = findIndex(state, task.id);\r\n\t\t\t\tstate[index] = task;\r\n\t\t\t}\r\n\t\t\tlocalStorage.setItem('tasks', JSON.stringify(state));\r\n\t\t\treturn [...state];\r\n\t\tcase types.UPDATE_STATUS:\r\n\t\t\tid = action.id;\r\n\t        index = findIndex(state, id);\r\n\t        if(index !== -1) {\r\n\t         \tstate[index] = {\r\n\t         \t\t...state[index],\r\n\t         \t\tstatus : !state[index].status\r\n\t         \t};\r\n\t            localStorage.setItem('tasks', JSON.stringify(state));\r\n\t        }\r\n\t\t\treturn [...state];\r\n\t\tcase types.DELETE_ITEM:\r\n\t\t\tid = action.id;\r\n\t        index = findIndex(state, id);\r\n\t        if(index !== -1) {\r\n\t            state.splice(index, 1);\r\n\t            localStorage.setItem('tasks', JSON.stringify(state));\r\n\t        }\r\n\t\t\treturn [...state];\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = false;\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase types.TOGGLE_FORM:\r\n\t\t\treturn !state;\r\n\t\tcase types.CLOSE_FORM:\r\n\t\t\treturn false;\r\n\t\tcase types.OPEN_FORM:\r\n\t\t\treturn true;\r\n\t\tdefault: return state;\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n\tid : '',\r\n\tname : '',\r\n\tstatus : false\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase types.UPDATE_ITEM:\r\n\t        state = action.task;\r\n\t\t\treturn state;\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n\tname : '',\r\n\tstatus : -1\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase types.FILTER_TASK:\r\n\t       \treturn {\r\n\t       \t\tname : action.filter.name,\r\n\t       \t\tstatus : parseInt(action.filter.status, 10)\r\n\t       \t};\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = '';\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase types.SEARCH_TASK:\r\n\t\t\treturn action.keyword;\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n\tby : '',\r\n\tvalue : 0\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase types.SORT_TASK:\r\n\t\t\treturn action.sort;\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport taskEditing from './taskEditing';\r\nimport filter from './filter'; \r\nimport search from './search'; \r\nimport sort from './sort'; \r\n\r\nconst myReducer = combineReducers({\r\n\ttasks, // tasks : tasks\r\n\tisDisplayForm,\r\n\ttaskEditing,\r\n\tfilter,\r\n\tsearch,\r\n\tsort\r\n});\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//Store\nimport { createStore } from 'redux';\nimport myReducer from './reducers/index';\nimport { Provider } from 'react-redux';\nconst store = createStore(\n\tmyReducer,\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n\t<Provider store={ store } >\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('content')\n);\n\n"],"sourceRoot":""}